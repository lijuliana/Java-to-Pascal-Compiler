package scanner;
// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: /Users/julianali/IdeaProjects/Compiler_Li/src/JFlexTest.flex


/**
* This file defines a lexer for English essays to find correct MLA headers, MLA intext and works cited citations
*
* @author  Harrison Chen, Juliana Li
* @version 9/12/23
*
*/
import java.io.*;


@SuppressWarnings("fallthrough")
public class ScannerJFlex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\22\0\1\5\1\6"+
    "\1\7\4\0\1\10\1\11\1\12\2\0\1\13\1\14"+
    "\1\15\1\10\12\16\1\17\1\20\3\0\1\6\1\0"+
    "\2\21\1\22\1\21\1\23\3\21\1\24\14\21\1\24"+
    "\1\25\1\24\2\21\1\10\1\0\1\10\3\0\1\26"+
    "\1\27\1\30\1\31\1\32\3\30\1\33\1\30\1\34"+
    "\1\35\1\30\1\36\1\37\2\30\1\40\1\41\1\42"+
    "\1\30\1\43\1\30\1\43\1\44\1\30\12\0\1\2"+
    "\u018e\0\1\17\3\0\2\10\2\0\1\45\1\46\10\0"+
    "\1\10\1\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\4\0\1\2\3\0\1\2\3\0\1\2"+
    "\2\0\1\2\6\0\1\2\3\0\1\2\12\0\1\2"+
    "\20\0\1\2\26\0\1\3\105\0\1\2\12\0\1\4"+
    "\15\0\1\2\22\0\1\5\7\0\1\6\76\0\1\5"+
    "\35\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\47\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u0297\0\u041d\0\u0444\0\u046b"+
    "\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3"+
    "\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db"+
    "\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813"+
    "\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b"+
    "\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\47\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc"+
    "\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c"+
    "\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074"+
    "\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac"+
    "\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4"+
    "\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c"+
    "\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\47\0\u1887\0\u18ae\0\u18d5"+
    "\0\u18fc\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d"+
    "\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45"+
    "\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d"+
    "\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\47\0\u1d67\0\u1d8e"+
    "\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\47\0\u1e78\0\u1e9f"+
    "\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7"+
    "\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u210f"+
    "\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220\0\u2247"+
    "\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358\0\u237f"+
    "\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469\0\u2490\0\u24b7"+
    "\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a\0\u25a1\0\u25c8\0\u25ef"+
    "\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727"+
    "\0\u274e\0\u2775\0\u279c\0\u27c3\0\u1026\0\u27ea\0\u2811\0\u2838"+
    "\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u2970"+
    "\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8"+
    "\0\u2acf\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0"+
    "\0\u2c07\0\u2c2e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\0\1\2\1\4\2\2\1\5\11\2"+
    "\5\6\17\2\1\5\1\2\74\0\1\7\22\0\1\2"+
    "\52\0\2\10\1\0\1\10\2\0\3\10\1\0\1\10"+
    "\1\0\5\11\17\10\7\0\1\12\1\13\2\14\2\0"+
    "\1\15\1\16\1\17\1\0\1\14\1\0\5\14\17\20"+
    "\2\14\37\0\1\21\14\0\2\10\1\22\1\10\2\0"+
    "\3\10\1\0\1\10\1\0\24\10\1\0\1\22\5\0"+
    "\1\11\1\23\1\24\1\11\2\0\2\11\1\23\1\0"+
    "\1\11\1\0\24\11\1\14\1\24\5\0\1\14\1\13"+
    "\2\14\2\0\2\14\1\13\1\0\1\14\1\0\5\25"+
    "\21\14\7\0\1\26\36\0\1\26\5\0\1\14\1\13"+
    "\2\14\2\0\2\14\1\13\1\0\1\14\1\0\26\14"+
    "\5\0\1\27\1\13\2\14\2\0\2\14\1\13\1\0"+
    "\1\14\1\0\26\14\5\0\1\14\1\13\2\14\2\0"+
    "\2\14\1\13\1\0\1\14\1\0\5\30\21\14\5\0"+
    "\1\31\1\0\1\26\3\0\1\32\32\0\1\26\5\0"+
    "\1\12\1\13\2\14\2\0\1\15\1\16\1\13\1\0"+
    "\1\14\1\0\5\14\17\20\2\14\40\0\1\33\13\0"+
    "\1\34\46\0\2\10\1\35\1\10\2\0\3\10\1\0"+
    "\1\10\1\0\24\10\1\0\1\35\5\0\1\36\1\13"+
    "\2\14\2\0\2\14\1\13\1\0\1\14\1\0\26\14"+
    "\1\0\1\37\3\0\1\14\1\13\2\14\2\0\1\14"+
    "\1\40\1\41\1\0\1\14\1\0\5\14\17\42\2\14"+
    "\5\0\1\14\1\13\2\14\2\0\2\14\1\13\1\0"+
    "\1\14\1\0\5\43\21\14\5\0\1\12\1\13\2\14"+
    "\2\0\1\15\1\14\1\13\1\0\1\14\1\0\5\14"+
    "\17\30\2\14\21\0\5\44\26\0\1\45\75\0\1\46"+
    "\23\0\1\47\42\0\1\14\1\13\2\14\1\47\1\0"+
    "\2\14\1\13\1\0\1\14\1\0\26\14\21\0\5\50"+
    "\26\0\1\14\1\13\2\14\2\0\2\14\1\13\1\0"+
    "\1\14\1\0\5\51\21\14\1\0\1\37\5\0\1\26"+
    "\36\0\1\26\1\0\1\37\3\0\1\14\1\13\2\14"+
    "\2\0\1\14\1\40\1\13\1\0\1\14\1\0\5\14"+
    "\17\42\2\14\5\0\1\27\1\13\2\14\2\0\1\52"+
    "\1\53\1\54\1\0\1\14\1\0\5\14\17\55\2\14"+
    "\1\0\1\37\12\0\1\56\1\57\10\0\17\60\23\0"+
    "\5\61\62\0\1\62\23\0\1\63\2\0\3\64\1\65"+
    "\1\64\26\0\1\66\7\0\1\67\10\0\17\50\3\0"+
    "\1\37\3\0\1\14\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\14\17\51\2\14\5\0\1\70"+
    "\1\13\2\14\2\0\2\14\1\13\1\0\1\14\1\0"+
    "\26\14\5\0\1\14\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\71\21\14\5\0\1\72\1\0"+
    "\1\26\3\0\1\73\1\0\1\74\30\0\1\26\5\0"+
    "\1\27\1\13\2\14\2\0\1\52\1\53\1\75\1\0"+
    "\1\14\1\0\5\14\17\55\2\14\21\0\5\76\22\0"+
    "\1\37\46\0\1\37\12\0\1\56\11\0\17\60\7\0"+
    "\1\45\5\0\1\73\1\77\1\100\10\0\17\101\7\0"+
    "\1\102\53\0\1\103\1\0\1\104\1\0\1\63\35\0"+
    "\1\105\6\0\1\106\1\107\10\0\17\110\7\0\1\105"+
    "\6\0\1\106\1\111\6\0\1\112\1\0\17\110\23\0"+
    "\5\113\26\0\1\66\46\0\1\14\1\13\2\14\2\0"+
    "\2\14\1\13\1\0\1\14\1\0\5\14\1\114\3\14"+
    "\1\115\14\14\5\0\1\27\1\13\2\14\2\0\1\52"+
    "\1\14\1\75\1\0\1\14\1\0\5\14\17\71\2\14"+
    "\5\0\1\116\6\0\1\116\2\0\1\116\1\0\5\117"+
    "\17\116\7\0\1\120\46\0\1\121\46\0\1\121\1\0"+
    "\1\26\36\0\1\26\1\0\1\37\24\0\17\76\23\0"+
    "\5\122\26\0\1\72\5\0\1\73\1\0\1\74\36\0"+
    "\1\45\5\0\1\73\1\77\1\74\10\0\17\101\24\0"+
    "\1\123\31\0\2\124\4\0\1\124\1\0\1\124\1\0"+
    "\2\124\44\0\1\125\46\0\1\63\5\0\1\112\43\0"+
    "\5\126\26\0\1\105\46\0\1\105\6\0\1\106\11\0"+
    "\17\110\7\0\1\105\25\0\1\127\7\0\1\127\20\0"+
    "\1\130\6\0\1\112\23\0\1\131\12\0\1\132\1\133"+
    "\10\0\17\134\7\0\1\14\1\13\2\14\2\0\2\14"+
    "\1\13\1\0\1\14\1\0\15\14\1\135\10\14\5\0"+
    "\1\14\1\13\2\14\2\0\2\14\1\13\1\0\1\14"+
    "\1\0\21\14\1\136\4\14\5\0\1\116\6\0\1\116"+
    "\1\137\1\0\1\116\1\0\24\116\7\0\1\140\5\0"+
    "\1\73\1\141\1\142\1\0\1\116\1\0\5\116\17\143"+
    "\30\0\1\144\3\0\1\145\21\0\1\116\6\0\1\116"+
    "\2\0\1\116\1\0\24\116\7\0\1\45\5\0\1\73"+
    "\1\0\1\74\10\0\17\122\35\0\1\146\25\0\1\103"+
    "\3\0\1\125\35\0\1\105\20\0\17\126\17\0\1\147"+
    "\15\0\1\127\7\0\1\127\36\0\1\127\7\0\1\127"+
    "\3\0\1\131\1\150\3\0\42\131\21\0\5\151\22\0"+
    "\1\131\46\0\1\131\12\0\1\132\11\0\17\134\7\0"+
    "\1\14\1\13\2\14\2\0\2\14\1\13\1\0\1\14"+
    "\1\0\10\14\1\152\15\14\5\0\1\153\1\13\2\14"+
    "\2\0\2\14\1\13\1\0\1\14\1\0\26\14\5\0"+
    "\1\154\7\0\1\155\1\156\2\0\5\157\17\155\7\0"+
    "\1\116\6\0\1\116\1\137\1\0\1\116\1\0\5\117"+
    "\17\116\7\0\1\116\6\0\1\116\1\137\1\0\1\116"+
    "\1\0\5\160\17\116\7\0\1\161\5\0\1\73\1\0"+
    "\1\162\1\156\2\0\5\157\17\155\7\0\1\140\5\0"+
    "\1\73\1\141\1\163\1\0\1\116\1\0\5\116\17\143"+
    "\40\0\1\164\52\0\1\165\46\0\1\166\22\0\1\63"+
    "\46\0\1\167\31\0\1\131\24\0\17\151\7\0\1\170"+
    "\1\13\2\14\2\0\2\14\1\13\1\0\1\14\1\0"+
    "\26\14\5\0\1\14\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\14\1\171\20\14\5\0\1\155"+
    "\5\0\1\172\1\0\1\155\1\156\2\0\2\157\1\173"+
    "\2\157\17\155\7\0\1\155\5\0\1\172\1\0\1\155"+
    "\1\156\2\0\5\157\17\155\7\0\1\156\5\0\1\174"+
    "\1\0\2\156\7\0\17\156\7\0\1\157\5\0\1\175"+
    "\1\0\1\157\3\0\24\157\7\0\1\140\5\0\1\73"+
    "\1\116\1\163\1\0\1\116\1\0\5\116\17\160\7\0"+
    "\1\176\5\0\1\172\1\116\1\155\1\156\1\116\1\0"+
    "\2\177\1\200\2\177\17\176\7\0\1\201\5\0\1\172"+
    "\1\0\1\155\1\156\2\0\5\157\17\155\7\0\1\202"+
    "\7\0\1\155\1\156\2\0\5\157\17\155\33\0\1\203"+
    "\22\0\1\204\73\0\1\205\21\0\1\206\10\0\1\167"+
    "\35\0\1\14\1\13\2\14\2\0\2\14\1\13\1\0"+
    "\1\14\1\0\5\207\21\14\5\0\1\14\1\13\2\14"+
    "\2\0\2\14\1\13\1\0\1\14\1\0\14\14\1\210"+
    "\11\14\5\0\1\211\7\0\1\157\3\0\24\157\7\0"+
    "\1\157\5\0\1\175\1\0\1\157\3\0\10\157\1\212"+
    "\13\157\7\0\1\157\7\0\1\157\3\0\24\157\7\0"+
    "\1\213\46\0\1\176\5\0\1\172\1\116\1\214\1\156"+
    "\1\116\1\0\5\215\17\176\7\0\1\216\5\0\1\217"+
    "\1\141\1\220\1\0\1\116\1\0\5\215\17\221\7\0"+
    "\1\216\5\0\1\217\1\141\1\220\1\0\1\116\1\0"+
    "\5\215\3\221\1\222\13\221\7\0\1\176\5\0\1\172"+
    "\1\116\1\155\1\156\1\116\1\0\5\215\17\176\7\0"+
    "\1\176\5\0\1\172\1\116\1\155\1\156\1\116\1\0"+
    "\2\215\1\223\2\215\17\176\7\0\1\224\67\0\1\225"+
    "\51\0\1\226\36\0\5\227\26\0\1\230\1\13\2\14"+
    "\2\0\1\14\1\231\1\232\1\0\1\14\1\0\5\14"+
    "\17\233\2\14\5\0\1\14\1\13\2\14\2\0\2\14"+
    "\1\75\1\0\1\14\1\0\26\14\5\0\1\157\5\0"+
    "\1\175\1\0\1\157\1\234\2\0\24\157\7\0\1\157"+
    "\5\0\1\175\1\0\1\157\3\0\12\157\1\235\11\157"+
    "\20\0\1\234\35\0\1\154\5\0\1\172\1\0\1\155"+
    "\1\156\2\0\5\157\17\155\7\0\1\215\5\0\1\175"+
    "\1\116\1\236\1\0\1\116\1\0\24\215\7\0\1\215"+
    "\5\0\1\175\1\116\1\236\1\0\1\116\1\0\5\177"+
    "\17\215\7\0\1\237\46\0\1\161\5\0\1\217\1\0"+
    "\1\162\1\156\2\0\5\157\17\155\7\0\1\216\5\0"+
    "\1\217\1\141\1\240\1\0\1\116\1\0\5\215\17\221"+
    "\7\0\1\216\5\0\1\217\1\141\1\240\1\0\1\116"+
    "\1\0\5\215\5\221\1\241\11\221\7\0\1\215\5\0"+
    "\1\175\1\116\1\236\1\0\1\116\1\0\10\215\1\242"+
    "\13\215\23\0\5\243\56\0\1\244\12\0\1\245\3\0"+
    "\1\226\46\0\1\246\20\0\17\227\7\0\1\14\1\13"+
    "\2\14\2\0\2\14\1\13\1\0\1\14\1\0\5\247"+
    "\21\14\5\0\1\14\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\250\21\14\5\0\1\251\1\0"+
    "\1\26\36\0\1\26\5\0\1\230\1\13\2\14\2\0"+
    "\1\14\1\231\1\13\1\0\1\14\1\0\5\14\17\233"+
    "\2\14\16\0\1\252\35\0\1\157\5\0\1\175\1\0"+
    "\1\157\3\0\21\157\1\253\2\157\7\0\1\154\5\0"+
    "\1\175\1\0\1\155\1\156\2\0\5\157\17\155\20\0"+
    "\1\234\7\0\1\144\3\0\1\145\21\0\1\202\5\0"+
    "\1\175\1\0\1\155\1\156\2\0\5\157\17\155\7\0"+
    "\1\216\5\0\1\217\1\141\1\240\1\0\1\116\1\0"+
    "\5\215\14\221\1\254\2\221\7\0\1\215\5\0\1\175"+
    "\1\116\1\236\1\0\1\116\1\0\12\215\1\255\11\215"+
    "\7\0\1\251\6\0\1\256\1\257\10\0\17\260\17\0"+
    "\1\74\47\0\1\261\35\0\1\14\1\13\2\14\2\0"+
    "\1\14\1\262\1\263\1\0\1\14\1\0\5\14\17\264"+
    "\2\14\5\0\1\230\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\14\17\250\2\14\21\0\5\265"+
    "\37\0\1\266\35\0\1\157\5\0\1\175\1\0\1\157"+
    "\3\0\11\157\1\267\12\157\7\0\1\216\5\0\1\217"+
    "\1\141\1\240\1\0\1\116\1\0\5\215\4\221\1\270"+
    "\12\221\7\0\1\215\5\0\1\175\1\116\1\236\1\0"+
    "\1\116\1\0\21\215\1\271\2\215\23\0\5\272\26\0"+
    "\1\251\46\0\1\251\6\0\1\256\11\0\17\260\20\0"+
    "\1\273\35\0\1\14\1\13\2\14\2\0\2\14\1\13"+
    "\1\0\1\14\1\0\5\274\21\14\5\0\1\121\1\0"+
    "\1\26\5\0\1\74\30\0\1\26\5\0\1\14\1\13"+
    "\2\14\2\0\1\14\1\262\1\75\1\0\1\14\1\0"+
    "\5\14\17\264\2\14\14\0\1\275\1\276\10\0\17\277"+
    "\20\0\1\300\35\0\1\157\5\0\1\175\1\0\1\157"+
    "\3\0\10\157\1\301\13\157\7\0\1\216\5\0\1\217"+
    "\1\141\1\240\1\0\1\116\1\0\5\215\3\221\1\302"+
    "\13\221\7\0\1\215\5\0\1\175\1\116\1\236\1\0"+
    "\1\116\1\0\11\215\1\303\12\215\7\0\1\251\20\0"+
    "\17\272\20\0\1\304\35\0\1\14\1\13\2\14\2\0"+
    "\2\14\1\75\1\0\1\14\1\0\5\14\17\274\2\14"+
    "\21\0\5\305\26\0\1\121\7\0\1\74\45\0\1\275"+
    "\1\74\10\0\17\277\17\0\1\306\36\0\1\307\5\0"+
    "\1\175\1\0\1\157\3\0\24\157\7\0\1\310\5\0"+
    "\1\217\1\141\1\240\1\0\1\116\1\0\5\215\17\221"+
    "\7\0\1\215\5\0\1\175\1\116\1\236\1\0\1\116"+
    "\1\0\10\215\1\311\13\215\20\0\1\312\45\0\1\74"+
    "\10\0\17\305\7\0\1\157\5\0\1\175\1\0\1\157"+
    "\3\0\6\157\1\313\15\157\7\0\1\215\5\0\1\175"+
    "\1\116\1\236\1\0\1\116\1\0\5\177\1\215\1\314"+
    "\15\215\7\0\1\315\5\0\1\175\1\116\1\236\1\0"+
    "\1\116\1\0\24\215\3\0\1\316\52\0\1\157\5\0"+
    "\1\175\1\0\1\157\3\0\23\157\1\317\7\0\1\215"+
    "\5\0\1\175\1\116\1\236\1\0\1\116\1\0\23\215"+
    "\1\320\7\0\1\215\5\0\1\175\1\116\1\236\1\0"+
    "\1\116\1\0\6\215\1\314\15\215\7\0\1\321\5\0"+
    "\1\175\1\0\1\157\3\0\24\157\7\0\1\322\5\0"+
    "\1\175\1\116\1\236\1\0\1\116\1\0\24\215\7\0"+
    "\1\157\5\0\1\175\1\0\1\157\3\0\5\323\17\157"+
    "\7\0\1\215\5\0\1\175\1\116\1\236\1\0\1\116"+
    "\1\0\5\324\17\215\7\0\1\325\5\0\1\326\1\327"+
    "\1\330\3\0\5\157\17\331\7\0\1\332\5\0\1\326"+
    "\1\333\1\334\1\0\1\116\1\0\5\215\17\335\7\0"+
    "\1\157\5\0\1\175\1\0\1\157\3\0\5\336\17\157"+
    "\7\0\1\337\7\0\1\155\1\156\2\0\5\157\17\155"+
    "\23\0\5\340\26\0\1\325\5\0\1\326\1\0\1\157"+
    "\3\0\24\157\7\0\1\325\5\0\1\326\1\327\1\157"+
    "\3\0\5\157\17\331\7\0\1\215\5\0\1\175\1\116"+
    "\1\236\1\0\1\116\1\0\5\341\17\215\7\0\1\116"+
    "\6\0\1\116\1\137\1\0\1\116\1\0\5\342\17\116"+
    "\7\0\1\343\5\0\1\326\1\0\1\155\1\156\2\0"+
    "\5\157\17\155\7\0\1\332\5\0\1\326\1\333\1\236"+
    "\1\0\1\116\1\0\5\215\17\335\7\0\1\325\5\0"+
    "\1\344\1\345\1\346\3\0\5\157\17\347\7\0\1\155"+
    "\5\0\1\172\1\0\1\155\1\350\2\0\5\351\17\155"+
    "\7\0\1\352\5\0\1\353\12\0\17\340\7\0\1\332"+
    "\5\0\1\344\1\354\1\355\1\0\1\116\1\0\5\215"+
    "\17\356\7\0\1\357\5\0\1\353\1\116\1\137\1\0"+
    "\1\116\1\0\5\116\17\342\7\0\1\155\5\0\1\172"+
    "\1\0\1\155\1\156\2\0\2\336\1\360\2\336\17\155"+
    "\7\0\1\361\7\0\1\155\1\156\2\0\5\157\17\155"+
    "\23\0\5\362\26\0\1\325\5\0\1\344\1\0\1\157"+
    "\3\0\24\157\7\0\1\325\5\0\1\344\1\345\1\157"+
    "\3\0\5\157\17\347\7\0\1\156\5\0\1\174\1\0"+
    "\1\156\1\363\7\0\17\156\7\0\1\364\5\0\1\365"+
    "\1\366\1\367\3\0\5\157\17\370\23\0\5\371\26\0"+
    "\1\372\7\0\1\155\1\156\2\0\5\157\17\155\7\0"+
    "\1\116\6\0\1\116\1\137\1\0\1\116\1\0\5\373"+
    "\17\116\7\0\1\343\5\0\1\344\1\0\1\155\1\156"+
    "\2\0\5\157\17\155\7\0\1\332\5\0\1\344\1\354"+
    "\1\236\1\0\1\116\1\0\5\215\17\356\7\0\1\116"+
    "\6\0\1\116\1\137\1\0\1\116\1\0\5\374\17\116"+
    "\7\0\1\325\5\0\1\344\1\345\1\346\3\0\5\157"+
    "\3\347\1\375\13\347\7\0\1\155\5\0\1\172\1\0"+
    "\1\155\1\350\2\0\5\157\17\155\7\0\1\352\5\0"+
    "\1\376\12\0\17\362\7\0\1\156\5\0\1\174\1\0"+
    "\1\156\1\377\7\0\17\156\7\0\1\157\5\0\1\175"+
    "\1\0\1\157\3\0\5\351\17\157\7\0\1\u0100\7\0"+
    "\1\155\1\156\2\0\5\157\17\155\23\0\5\u0101\26\0"+
    "\1\364\5\0\1\365\1\0\1\157\3\0\24\157\7\0"+
    "\1\364\5\0\1\365\1\366\1\157\3\0\5\157\17\370"+
    "\7\0\1\352\5\0\1\376\1\345\1\u0102\10\0\17\u0103"+
    "\7\0\1\155\5\0\1\172\1\0\1\155\1\156\2\0"+
    "\5\351\17\155\7\0\1\357\5\0\1\376\1\116\1\137"+
    "\1\0\1\116\1\0\5\116\17\373\7\0\1\357\5\0"+
    "\1\376\1\354\1\u0104\1\0\1\116\1\0\5\116\17\u0105"+
    "\7\0\1\325\5\0\1\344\1\345\1\157\3\0\5\157"+
    "\5\347\1\u0106\11\347\7\0\1\155\7\0\1\155\1\156"+
    "\2\0\5\157\17\155\7\0\1\156\5\0\1\174\1\0"+
    "\1\156\1\u0107\7\0\17\156\7\0\1\155\5\0\1\172"+
    "\1\0\1\155\1\350\2\0\5\157\1\u0108\3\155\1\u0109"+
    "\12\155\7\0\1\u010a\5\0\1\u010b\12\0\17\u0101\7\0"+
    "\1\352\5\0\1\376\40\0\1\352\5\0\1\376\1\345"+
    "\11\0\17\u0103\7\0\1\343\5\0\1\376\1\0\1\155"+
    "\1\156\2\0\5\157\17\155\7\0\1\357\5\0\1\376"+
    "\1\354\1\137\1\0\1\116\1\0\5\116\17\u0105\7\0"+
    "\1\325\5\0\1\344\1\345\1\157\3\0\5\157\14\347"+
    "\1\u010c\2\347\7\0\1\156\5\0\1\174\1\0\1\u010d"+
    "\1\156\7\0\17\156\7\0\1\155\5\0\1\172\1\0"+
    "\1\155\1\156\2\0\5\157\10\155\1\u010e\6\155\7\0"+
    "\1\155\5\0\1\172\1\0\1\155\1\156\2\0\5\157"+
    "\14\155\1\u010f\2\155\23\0\5\u0110\26\0\1\u0111\7\0"+
    "\1\155\1\156\2\0\5\157\17\155\7\0\1\325\5\0"+
    "\1\344\1\345\1\157\3\0\5\157\4\347\1\u0112\12\347"+
    "\7\0\1\155\5\0\1\172\1\0\1\155\1\156\2\0"+
    "\5\157\3\155\1\u0113\13\155\7\0\1\u0114\5\0\1\172"+
    "\1\0\1\155\1\156\2\0\5\157\17\155\7\0\1\u010a"+
    "\5\0\1\u010b\1\366\1\u0115\10\0\17\u0116\7\0\1\155"+
    "\5\0\1\172\1\0\1\155\1\156\2\0\5\157\1\u0108"+
    "\3\155\1\u0109\12\155\7\0\1\325\5\0\1\344\1\345"+
    "\1\157\3\0\5\157\3\347\1\u0117\13\347\7\0\1\u0118"+
    "\5\0\1\172\1\0\1\155\1\156\2\0\5\157\17\155"+
    "\7\0\1\155\5\0\1\172\1\0\1\155\1\156\2\0"+
    "\5\157\1\u0119\16\155\7\0\1\u010a\5\0\1\u010b\40\0"+
    "\1\u010a\5\0\1\u010b\1\366\11\0\17\u0116\7\0\1\u011a"+
    "\5\0\1\344\1\345\1\157\3\0\5\157\17\347\7\0"+
    "\1\155\5\0\1\172\1\0\1\155\1\156\2\0\5\u011b"+
    "\17\155\7\0\1\155\5\0\1\172\1\0\1\155\1\156"+
    "\2\0\5\157\7\155\1\u011c\7\155\7\0\1\157\5\0"+
    "\1\175\1\0\1\157\3\0\5\336\1\157\1\313\15\157"+
    "\7\0\1\u011d\5\0\1\175\1\u011e\1\u011f\3\0\5\157"+
    "\17\u0120\7\0\1\155\5\0\1\344\1\0\1\155\1\156"+
    "\2\0\5\157\17\155\7\0\1\157\5\0\1\175\1\0"+
    "\1\157\3\0\5\u0121\17\157\23\0\5\u0122\26\0\1\u011d"+
    "\5\0\1\175\1\0\1\157\3\0\24\157\7\0\1\u011d"+
    "\5\0\1\175\1\u011e\1\157\3\0\5\157\17\u0120\7\0"+
    "\1\157\5\0\1\344\1\u0123\1\u0124\3\0\5\157\17\u0125"+
    "\7\0\1\u0126\20\0\17\u0122\23\0\5\u0127\26\0\1\157"+
    "\5\0\1\344\1\0\1\157\3\0\24\157\7\0\1\157"+
    "\5\0\1\344\1\u0123\1\157\3\0\5\157\17\u0125\23\0"+
    "\5\u0128\34\0\1\376\12\0\17\u0127\15\0\1\376\1\u0123"+
    "\1\u0129\10\0\17\u012a\15\0\1\376\46\0\1\376\1\u0123"+
    "\11\0\17\u012a\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11349];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\4\0\1\1\3\0\1\1\3\0"+
    "\1\1\2\0\1\11\6\0\1\1\3\0\1\1\12\0"+
    "\1\1\20\0\1\1\26\0\1\11\105\0\1\1\12\0"+
    "\1\11\15\0\1\1\22\0\1\11\7\0\1\11\76\0"+
    "\1\1\35\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerJFlex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public String nextToken() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return "END";
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
          // fall through
          case 7: break;
          case 2:
            { return "SENTENCE ["+yytext()+"]";
            }
          // fall through
          case 8: break;
          case 3:
            { return "INTEXT CITATION ["+yytext()+"] in paragraph "+yyline;
            }
          // fall through
          case 9: break;
          case 4:
            { return "works cited present";
            }
          // fall through
          case 10: break;
          case 5:
            { return "BOOK CITATION ["+yytext()+"]";
            }
          // fall through
          case 11: break;
          case 6:
            { return "MLA HEADER [\n"+yytext()+"]";
            }
          // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
